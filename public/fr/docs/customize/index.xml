<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Regolith â€“ Customize</title><link>https://regolith-linux.org/fr/docs/customize/</link><description>Recent content in Customize on Regolith</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://regolith-linux.org/fr/docs/customize/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Look</title><link>https://regolith-linux.org/fr/docs/customize/look/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-linux.org/fr/docs/customize/look/</guid><description>
&lt;p>Looks provided by Regolith have the package prefix &lt;code>regolith-look-&lt;/code>. For example, another look sporting the Solarized color palette and a different GTK theme and icon set is called &lt;code>regolith-look-solarized-dark&lt;/code>.&lt;/p>
&lt;h2 id="finding-looks">Finding Looks&lt;/h2>
&lt;p>All &lt;code>look&lt;/code> packages using this naming scheme can be found via the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ apt search ^regolith-look-
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-a-look">Installing a Look&lt;/h2>
&lt;p>Looks can be installed via the &lt;code>apt&lt;/code> tool or with any tool that can install Debian packages on the system, such as &lt;code>synaptic&lt;/code>. For example, this command will install the &lt;code>Ubuntu&lt;/code> look:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt install regolith-look-ubuntu
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you pay attention to the output of &lt;code>apt&lt;/code> you may notice that in addition to installing the look, &lt;code>fonts-font-awesome&lt;/code> will also be installed. As a feature, looks are able to depend on any resources or artifacts they require as packages. This ensures that once a &lt;code>look&lt;/code> is installed, the user does not need to care about what other things that &lt;code>look&lt;/code> make require to function properly. It&amp;rsquo;s taken care of by the package manager.&lt;/p>
&lt;h2 id="switching-to-a-look">Switching to a Look&lt;/h2>
&lt;p>Once a &lt;code>look&lt;/code> has been installed, a utility command called &lt;code>regolith-look&lt;/code> can be used to enable it. To enable the &lt;code>ubuntu&lt;/code> &lt;code>look&lt;/code> installed in the previous step, try the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ regolith-look &lt;span style="color:#204a87">set&lt;/span> ubuntu
$ regolith-look refresh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command will mention that it created a file in your user directory. This file is an Xresource file, and it&amp;rsquo;s stored in a specific path such that &lt;code>i3-gnome-flashback&lt;/code> will look for it upon session start. Let&amp;rsquo;s have a look at the file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat ~/.Xresources-regolith
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/ubuntu/root&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In essence, our Xresource file is simply pointing to another Xresource file. Lets look there:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat /etc/regolith/styles/ubuntu/root
! -- Styles - Colors
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/ubuntu/color&amp;#34;&lt;/span>
! -- Styles - Fonts
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/ubuntu/typeface&amp;#34;&lt;/span>
! -- Styles - Theme
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/ubuntu/theme&amp;#34;&lt;/span>
! -- Applications
! These files map values defined above into specific app settings.
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/st-term&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/i3-wm&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/i3xrocks&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/rofi&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#include &amp;#34;/etc/regolith/styles/gnome&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we can see that there are separate Xresource files that define color, typeface and theme (icon, GTK), and these are loaded and then applied to the UI components integrated by Regolith: st (terminal), i3-wm, i3xrocks, rofi, and GNOME.&lt;/p>
&lt;h2 id="refreshing-a-look">Refreshing a Look&lt;/h2>
&lt;p>There may be times that the UI of the system and the Regolith look get out of sync. For example, if a program sets the wallpaper or icon theme externally, this will not be reflected in the Xresource settings. Regolith will only update itself upon login if it detects of Xresource changes have been made. If you wish to force Regolith to reload the UI based on the Xresource settings, run:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ regolith-look refresh
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="learning-more">Learning More&lt;/h2>
&lt;p>To dig deeper, read about &lt;code>Styles&lt;/code> in the following page and have a look at the &lt;a href="https://github.com/regolith-linux/regolith-styles">&lt;code>regolith-styles&lt;/code> README&lt;/a>.&lt;/p></description></item><item><title>Docs: Styles</title><link>https://regolith-linux.org/fr/docs/customize/styles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-linux.org/fr/docs/customize/styles/</guid><description>
&lt;p>As stated in the &lt;a href="https://github.com/regolith-linux/regolith-styles">repo readme&lt;/a>, Regolith styles are a convention by which a set of files which define key/value pairs are loaded into memory and can be queried by &lt;code>xrdb&lt;/code> or &lt;code>xrescat&lt;/code>. Xresources employes the &lt;a href="https://en.wikipedia.org/wiki/C_preprocessor">C preprocessor&lt;/a> to allow for complex behaviors such as including more files, defining constants, and conditional expressions. In Regolith, only two preprocessor directives are used: &lt;code>#include&lt;/code> and &lt;code>#define&lt;/code>. &lt;code>#include&lt;/code> statements are used to reference other files. Collections of files called &lt;code>looks&lt;/code> were covered in the previous section of this guide. &lt;code>#define&lt;/code> statements simply allow for a symbolic value to be replaced by a literal value, like defining a variable.&lt;/p>
&lt;h2 id="defines">Defines&lt;/h2>
&lt;p>To maximize the re-use of theme information in Regolith, Xresources are divided into two categories of files: definition files and application files. The definition files make heavy use of the &lt;code>define&lt;/code> directive. They essentially bind an abstract key, such as &amp;ldquo;blue&amp;rdquo; or &amp;ldquo;terminal font&amp;rdquo; to a literal value, such as &lt;code>#0000FF&lt;/code> or &lt;code>Source Code Pro Medium&lt;/code>. In making changes to files, it&amp;rsquo;s expected that these defines will change. The user may wish to specify a different icon set, or typeface, and would do so by modifying or creating a new definition file. Once this file is created, it needs to be referenced by a top-level Xresource file in &lt;code>~/Xresource-regolith&lt;/code>.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Note that when referencing other files in Xresources via the &lt;code>#include&lt;/code> directive, shortcuts like &lt;code>$HOME&lt;/code> and &lt;code>~/&lt;/code> are not available. Absolute paths are required.&lt;/p>
&lt;/div>
&lt;h2 id="application-xresource-files">Application Xresource files&lt;/h2>
&lt;p>As mentioned previously, in &lt;code>/etc/regolith/styles&lt;/code> lives a number of Xresources, including those for specific applications such as &lt;code>st&lt;/code> or &lt;code>i3-wm&lt;/code>. Opening these files will show a mapping of the abstract keys provided by the defines files to application specific keys. In this way, the general description of the look can be mapped to any UI component or application that can read from Xresources.&lt;/p>
&lt;h2 id="loading-order">Loading Order&lt;/h2>
&lt;p>The &lt;code>i3-gnome-flashback&lt;/code> session init script will check for the first Xresources file it finds in the following order:&lt;/p>
&lt;ol>
&lt;li>&lt;code>~/.Xresources-regolith&lt;/code>&lt;/li>
&lt;li>&lt;code>/etc/regolith/styles/root&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>In addition to a Regolith Xresources file, &lt;code>~/.Xresources&lt;/code> will also be loaded if it exists upon session start.&lt;/p>
&lt;p>After loading a root Xresource file, the session init script then merges any entries found in the &lt;code>~/.config/regolith/Xresources&lt;/code> file. This file provides a quick way of simply overriding a few values without having to copy the entire set of resource definitions.&lt;/p>
&lt;h2 id="reloading-xresources">Reloading Xresources&lt;/h2>
&lt;p>The &lt;code>regolith-look&lt;/code> command can be used to reload all Xresource entries as they are loaded upon session initialization:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ regolith-look refresh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, the &lt;code>xrdb&lt;/code> command can be used to refresh specific Xresource files after they have changed. For example, to reload the user Xresource file run:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ xrdb -merge ~/.Xresources-regolith
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="verification">Verification&lt;/h3>
&lt;p>You can test that a change has been made to your Xresources file by querying it from the command line. If a change was made to key &lt;code>foo.bar&lt;/code> then the following command will return it&amp;rsquo;s current value, or &lt;code>empty&lt;/code> if unset:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ xrescat foo.bar empty
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Compositors</title><link>https://regolith-linux.org/fr/docs/customize/compositors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-linux.org/fr/docs/customize/compositors/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Pay special attention to this section if you are experiencing odd visual glitches or slow graphics performance.&lt;/p>
&lt;/div>
&lt;p>As mentioned previously, a compositor is a UI component that visual effects to windows before they are rendered on-screen. Many desktop environments integrate a compositor directly into the window manager, making it difficult to switch out or disable. In Regolith, the compositor is defined as a pluggable &amp;ldquo;extension point&amp;rdquo; in the packaging system. This means that compositors can be switched out simply by installing the packages that contain them. The underlying packaging system will ensure there are no conflicts and that all the dependencies of a given compositor are also installed.&lt;/p>
&lt;h2 id="finding-available-compositors">Finding Available Compositors&lt;/h2>
&lt;p>The following command will list all compositors configured to work with Regolith:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">apt search regolith-compositor-
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At least the following three compositors should be available:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package Name&lt;/th>
&lt;th>Backend&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>regolith-compositor-compton-glx&lt;/td>
&lt;td>&lt;a href="https://github.com/yshui/picom">Compton&lt;/a>&lt;/td>
&lt;td>The default compositor for Regolith. This compositor is modern, maintained, and handles screen tearing.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>regolith-compositor-xcompmgr&lt;/td>
&lt;td>xcompmgr&lt;/td>
&lt;td>An early compositor that may offer more consistent performance if &lt;code>compton-glx&lt;/code> is promblematic&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>regolith-compositor-none&lt;/td>
&lt;td>&lt;/td>
&lt;td>A no-op package that does not run a Compositor. Best for absolute UI performance, at the cost of visual effects.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="installing-a-compositor">Installing a Compositor&lt;/h2>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Due to the way that the compositor is managed by i3-wm, you must log out and back in for compositor changes to take effect. Restarting i3 is not sufficient.&lt;/p>
&lt;/div>
&lt;p>Run the following package install command to swap out the compositor. In this case we&amp;rsquo;ll run &lt;code>xcompmgr&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ apt install regolith-compositor-xcompmgr
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Log back in and the new compositor should be loaded. You can verify by checking the process list for &lt;code>xcompmgr&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ps aux &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep xcompmgr
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="overriding-a-compositor-configuration">Overriding a Compositor Configuration&lt;/h2>
&lt;h3 id="comptonpicom">Compton/Picom&lt;/h3>
&lt;p>To provide your own Compton/Picom compositor config, copy the default or create your own and save it as &lt;code>~/.config/regolith/compton/config&lt;/code>. Upon next session it will be loaded instead of the default config &lt;code>/etc/regolith/compton/config&lt;/code>.&lt;/p></description></item><item><title>Docs: Components</title><link>https://regolith-linux.org/fr/docs/customize/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-linux.org/fr/docs/customize/components/</guid><description>
&lt;p>As previously mentioned, Regolith is a collection of existing open source components that are integrated into a desktop environment. Due to standards regarding the way UI components should communicate and years of integration between components, for the most part is simple to swap out parts of the UI for others.&lt;/p>
&lt;p>The following table lists each UI component and notes regarding it&amp;rsquo;s mutability:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>UI Component&lt;/th>
&lt;th>Alternatives&lt;/th>
&lt;th>Swappable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Xorg&lt;/td>
&lt;td>Unknown&lt;/td>
&lt;td>Unknown&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>i3-gaps&lt;/td>
&lt;td>i3-wm, others&lt;/td>
&lt;td>Difficult but possible&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>i3bar&lt;/td>
&lt;td>Polybar, lemonbar, many others.&lt;/td>
&lt;td>Yes, the i3 config file is changed to load a different bar.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>i3xrocks&lt;/td>
&lt;td>i3blocks, barista, many others.&lt;/td>
&lt;td>Yes, the i3 config file is changed to load a different status program.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rofication&lt;/td>
&lt;td>Dunst, gnome-flashback&lt;/td>
&lt;td>Yes, the i3 config file is configured to load the Notification backend and Rofi UI, and i3xrocks is configured to load the blocklet.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Remontoire&lt;/td>
&lt;td>Conky&lt;/td>
&lt;td>Yes, the i3 config file is changed to load a different help program.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>gdm3&lt;/td>
&lt;td>lightdm, sddm, xdm, others.&lt;/td>
&lt;td>This is configured in Ubuntu. Installing an alternative session manager should present a prompt to specify which to use.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>gnome-flashback&lt;/td>
&lt;td>None&lt;/td>
&lt;td>No&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Due to the breadth of the topic, more details are not available here. Experimenting with different UI components is a fun way to learn more about the internals of the operating system. It is recommended to first experiment in a VM running Regolith to avoid breaking your working environment.&lt;/p></description></item><item><title>Docs: Packages</title><link>https://regolith-linux.org/fr/docs/customize/packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-linux.org/fr/docs/customize/packages/</guid><description>
&lt;p>The following graph generated by &lt;code>debtree&lt;/code> provides the dependency relationships of Regolith packages and some of their notable upstream dependencies:&lt;/p>
&lt;p>&lt;img src="https://regolith-linux.org/regolith-desktop-graph-l2.png" alt="Package Dependency Graph">&lt;/p>
&lt;h2 id="source">Source&lt;/h2>
&lt;h3 id="packages">Packages&lt;/h3>
&lt;p>Regolith&amp;rsquo;s packages are hosted on PPAs provided by launchpad.net:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>PPA&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Launchpad URL&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>ppa:regolith-linux/unstable&lt;/code>&lt;/td>
&lt;td>Packages staged for developer testing.&lt;/td>
&lt;td>&lt;a href="https://launchpad.net/~regolith-linux/+archive/ubuntu/unstable">https://launchpad.net/~regolith-linux/+archive/ubuntu/unstable&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ppa:regolith-linux/stable&lt;/code>&lt;/td>
&lt;td>Packages that have been tested but have not been committed to a release.&lt;/td>
&lt;td>&lt;a href="https://launchpad.net/~regolith-linux/+archive/ubuntu/stable">https://launchpad.net/~regolith-linux/+archive/ubuntu/stable&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ppa:regolith-linux/release&lt;/code>&lt;/td>
&lt;td>Packages as provided by the current Regolith release&lt;/td>
&lt;td>&lt;a href="https://launchpad.net/~regolith-linux/+archive/ubuntu/release">https://launchpad.net/~regolith-linux/+archive/ubuntu/release&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ppa:kgilmer/speed-ricer&lt;/code>&lt;/td>
&lt;td>General purpose packages that Regolith depends on that are not currently available via Ubuntu&amp;rsquo;s repos.&lt;/td>
&lt;td>&lt;a href="https://launchpad.net/~kgilmer/+archive/ubuntu/speed-ricer">https://launchpad.net/~kgilmer/+archive/ubuntu/speed-ricer&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="git-repositories">Git Repositories&lt;/h3>
&lt;p>The source code associated with Regolith packages is hosted on &lt;a href="https://github.com/regolith-linux">Regolith Linux&amp;rsquo;s GitHub organization&lt;/a>.&lt;/p>
&lt;h3 id="installer-isos">Installer ISOs&lt;/h3>
&lt;p>The installer is produced using the &lt;a href="https://launchpad.net/cubic">Cubic tool&lt;/a> and providing the target ISO files as manual uploads to the Regolith Linux GitHub org. The &lt;a href="https://github.com/regolith-linux/regolith-cubic-config">README in &lt;code>regolith-cubic-conf&lt;/code>&lt;/a> has more details.&lt;/p>
&lt;h2 id="build">Build&lt;/h2>
&lt;p>Regolith packages can be built, signed, and staged from the &lt;code>regolith-builder&lt;/code> repository. See the &lt;a href="https://github.com/regolith-linux/regolith-builder">project&amp;rsquo;s README&lt;/a> for details.&lt;/p>
&lt;h2 id="package-Î´-between-stock-ubuntu-and-regolith-linux">Package Î” between Stock Ubuntu and Regolith Linux&lt;/h2>
&lt;p>When installing Regolith via PPA, the user has control and visibility over all package changes via their package installation tool of choice, likely &lt;code>apt&lt;/code>, &lt;code>dpkg&lt;/code>, or &lt;code>synaptic&lt;/code>. However when installing Regolith via the Ubuntu Installer, the user does not see what packages are installed as part of that process. To cut down the size of the installer download, some packages were removed from the Ubuntu installer.&lt;/p>
&lt;h3 id="regolith-12">Regolith 1.2&lt;/h3>
&lt;p>For Regolith 1.2, the following packages are removed from stock Ubuntu:&lt;/p>
&lt;ul>
&lt;li>ubuntu-session&lt;/li>
&lt;li>libreoffice-*&lt;/li>
&lt;li>rythmbox-*&lt;/li>
&lt;/ul>
&lt;p>Of course, any of these packages can be re-added by the user after installation using a variety of tools including the app store.&lt;/p>
&lt;h3 id="regolith-13">Regolith 1.3&lt;/h3>
&lt;p>For the 1.3 release of Regolith, changes from baseline Ubuntu are &lt;a href="https://regolith-linux.org/docs/reference/releases/regolith-1.3-release-notes/#iso-generation">documented here&lt;/a>.&lt;/p></description></item></channel></rss>